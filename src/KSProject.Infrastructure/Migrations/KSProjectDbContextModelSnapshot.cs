// <auto-generated />
using System;
using KSProject.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace KSProject.Infrastructure.Migrations
{
    [DbContext(typeof(KSProjectDbContext))]
    partial class KSProjectDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("KSProject.Domain.Aggregates.Roles.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("98f4f7df-15bb-4547-8495-f098a753536f"),
                            Description = "Administrator role with all permissions.",
                            Name = "Admin",
                            Version = 0
                        },
                        new
                        {
                            Id = new Guid("1fd5d547-737a-45d3-b71f-c5e8f692d434"),
                            Description = "Standard user role with limited permissions.",
                            Name = "User",
                            Version = 0
                        });
                });

            modelBuilder.Entity("KSProject.Domain.Aggregates.Roles.RolePermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermissions");
                });

            modelBuilder.Entity("KSProject.Domain.Aggregates.Test.TestAggregate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("TestAggregates");
                });

            modelBuilder.Entity("KSProject.Domain.Aggregates.Test.TestEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("TestAggregateId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TestAggregateId");

                    b.ToTable("TestEntities");
                });

            modelBuilder.Entity("KSProject.Domain.Aggregates.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<bool>("SuperAdmin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("UserProfileId")
                        .HasColumnType("uuid");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("551de0bd-f8bf-4fa4-9523-f19b7c6dd95b"),
                            Active = true,
                            Email = "superadmin@superadmin.com",
                            HashedPassword = "01cVBRfT5lroSYX3twWtmf3Dg3KiLs6gzsr4qvggokk=",
                            PhoneNumber = "09123456780",
                            SuperAdmin = true,
                            UserName = "superadmin",
                            Version = 0
                        },
                        new
                        {
                            Id = new Guid("5d2b2a64-0fa7-46af-bf1c-aadf1d7fb120"),
                            Active = true,
                            Email = "admin@admin.com",
                            HashedPassword = "PrP+ZrMeO00Q+nC1ytSccRIpSvauTkdqHEBRVdRaoSE=",
                            PhoneNumber = "09123456789",
                            SuperAdmin = false,
                            UserName = "admin",
                            Version = 0
                        },
                        new
                        {
                            Id = new Guid("c75e1cf0-84c0-4f9e-a608-e9a9b0e7d62f"),
                            Active = true,
                            Email = "user1@user.com",
                            HashedPassword = "vFhI8ifMFh619o3+mMsTEQqchDzmnpU6iBB9hlWD05c=",
                            PhoneNumber = "09123456782",
                            SuperAdmin = false,
                            UserName = "user1",
                            Version = 0
                        },
                        new
                        {
                            Id = new Guid("9650f7f3-333b-4a77-b992-9a55179bfa12"),
                            Active = true,
                            Email = "user2@user.com",
                            HashedPassword = "vFhI8ifMFh619o3+mMsTEQqchDzmnpU6iBB9hlWD05c=",
                            PhoneNumber = "09123456787",
                            SuperAdmin = false,
                            UserName = "user2",
                            Version = 0
                        });
                });

            modelBuilder.Entity("KSProject.Domain.Aggregates.Users.UserProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AboutMe")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("BirthDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProfileImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("KSProject.Infrastructure.Outbox.OutboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Error")
                        .HasColumnType("text");

                    b.Property<DateTime?>("OccuredOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ProcessedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OutboxMessages");
                });

            modelBuilder.Entity("UsersRoles", b =>
                {
                    b.Property<Guid>("RolesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uuid");

                    b.HasKey("RolesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("UsersRoles");

                    b.HasData(
                        new
                        {
                            RolesId = new Guid("1fd5d547-737a-45d3-b71f-c5e8f692d434"),
                            UsersId = new Guid("551de0bd-f8bf-4fa4-9523-f19b7c6dd95b")
                        },
                        new
                        {
                            RolesId = new Guid("98f4f7df-15bb-4547-8495-f098a753536f"),
                            UsersId = new Guid("5d2b2a64-0fa7-46af-bf1c-aadf1d7fb120")
                        },
                        new
                        {
                            RolesId = new Guid("1fd5d547-737a-45d3-b71f-c5e8f692d434"),
                            UsersId = new Guid("c75e1cf0-84c0-4f9e-a608-e9a9b0e7d62f")
                        },
                        new
                        {
                            RolesId = new Guid("1fd5d547-737a-45d3-b71f-c5e8f692d434"),
                            UsersId = new Guid("9650f7f3-333b-4a77-b992-9a55179bfa12")
                        });
                });

            modelBuilder.Entity("KSProject.Domain.Aggregates.Roles.RolePermission", b =>
                {
                    b.HasOne("KSProject.Domain.Aggregates.Roles.Role", "Role")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("KSProject.Domain.Aggregates.Test.TestEntity", b =>
                {
                    b.HasOne("KSProject.Domain.Aggregates.Test.TestAggregate", "TestAggregate")
                        .WithMany("Entities")
                        .HasForeignKey("TestAggregateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TestAggregate");
                });

            modelBuilder.Entity("KSProject.Domain.Aggregates.Users.User", b =>
                {
                    b.OwnsMany("KSProject.Domain.Aggregates.Users.ValueObjects.UserLoginDate", "UserLoginDates", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("IpAddress")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<DateTimeOffset>("LoginDate")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.HasKey("Id");

                            b1.HasIndex("UserId");

                            b1.ToTable("UserLoginDates", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsMany("KSProject.Domain.Aggregates.Users.ValueObjects.UserPermission", "Permissions", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.HasKey("Id");

                            b1.HasIndex("UserId");

                            b1.ToTable("UserPermissions", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsMany("KSProject.Domain.Aggregates.Users.ValueObjects.UserSecurityStamp", "UserSecurityStamps", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<DateTimeOffset>("CreatedAt")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<DateTimeOffset>("ExpirationDate")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("SecurityStamp")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.HasKey("Id");

                            b1.HasIndex("UserId");

                            b1.ToTable("UserSecurityStamps", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsMany("KSProject.Domain.Aggregates.Users.ValueObjects.UserToken", "UserTokens", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<DateTimeOffset>("ExpirationDateTime")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("Token")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("Type")
                                .HasColumnType("integer");

                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.HasKey("Id");

                            b1.HasIndex("UserId");

                            b1.ToTable("UserTokens", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("Permissions");

                    b.Navigation("UserLoginDates");

                    b.Navigation("UserSecurityStamps");

                    b.Navigation("UserTokens");
                });

            modelBuilder.Entity("KSProject.Domain.Aggregates.Users.UserProfile", b =>
                {
                    b.HasOne("KSProject.Domain.Aggregates.Users.User", "User")
                        .WithOne("Profile")
                        .HasForeignKey("KSProject.Domain.Aggregates.Users.UserProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("UsersRoles", b =>
                {
                    b.HasOne("KSProject.Domain.Aggregates.Roles.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KSProject.Domain.Aggregates.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KSProject.Domain.Aggregates.Roles.Role", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("KSProject.Domain.Aggregates.Test.TestAggregate", b =>
                {
                    b.Navigation("Entities");
                });

            modelBuilder.Entity("KSProject.Domain.Aggregates.Users.User", b =>
                {
                    b.Navigation("Profile");
                });
#pragma warning restore 612, 618
        }
    }
}
